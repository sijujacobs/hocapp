{"version":3,"sources":["components/Home.jsx","components/DataLoader.jsx","components/Album.jsx","components/Photo.jsx","components/User.jsx","App.js","serviceWorker.js","index.js"],"names":["Home","props","className","DataLoader","injectedProps","BaseComponent","state","localData","id","name","date","remoteData","console","log","this","fetchRemoteData","dataType","fetch","then","res","json","result","splicedResult","splice","setState","catch","error","React","Component","DataLoadedAlbum","length","map","p","key","title","substring","DataLoadedPhoto","DataLoadedUser","App","to","path","exact","component","Album","User","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oNAQeA,EANF,SAACC,GACV,OAAO,yBAAKC,UAAU,QAClB,4C,wCCyCOC,EA3CI,SAAAC,GAAa,OAAG,SAACC,GAyChC,OAzCkD,2MAE9CC,MAAQ,CACJC,UAAY,CACRC,GAAU,IACVC,KAAU,mBACVC,KAAU,cAEdC,WAAY,IAR8B,mFAa1CC,QAAQC,IAAI,wDAA0DT,GACtEU,KAAKC,gBAAgBX,EAAcY,YAdO,sCAoB9BA,GAAU,IAAD,OACrB,IAEIC,MADc,wCAA0CD,GAEvDE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACF,IAAIC,EAAgBD,EAAOE,OAAO,EAAG,IACrCX,QAAQC,IAAI,kBAAmBS,GAC/B,EAAKE,SAAS,CAAEb,WAAaW,OAEhCG,OAAM,SAAAC,GAAK,OAAId,QAAQC,IAAI,iBAAkBa,MACjD,MAAMA,GACHd,QAAQC,IAAI,2BAA4Ba,MAhCF,+BAqC1C,OAAO,kBAACrB,EAAD,CAAeE,UAAWO,KAAKR,MAAMC,UAAWI,WAAYG,KAAKR,MAAMK,iBArCpC,GAChCgB,IAAMC,aCabC,EADS1B,EAAW,CAACa,SAAU,UAAtBb,EAZV,SAACF,GAGX,OAFAW,QAAQC,IAAI,oBAAqBZ,GAE1B,yBAAKC,UAAU,SAClB,2CAEKD,EAAMU,YAAcV,EAAMU,WAAWmB,OAAS,GAC/C7B,EAAMU,WAAWoB,KAAK,SAAAC,GAAC,OAAI,yBAAKC,IAAKD,EAAExB,GAAIN,UAAU,YAAY8B,EAAEE,MAAMC,UAAU,EAAG,YCOnFC,EADSjC,EAAW,CAACa,SAAU,UAAtBb,EAXV,SAACF,GAEX,OADAW,QAAQC,IAAI,oBAAqBZ,GAC1B,yBAAKC,UAAU,SAClB,2CAEKD,EAAMU,YAAcV,EAAMU,WAAWmB,OAAS,GAC/C7B,EAAMU,WAAWoB,KAAK,SAAAC,GAAC,OAAI,yBAAKC,IAAKD,EAAExB,GAAIN,UAAU,YAAY8B,EAAEE,MAAMC,UAAU,EAAG,YCGnFE,EADQlC,EAAW,CAACa,SAAU,SAAtBb,EAVV,SAACF,GACV,OAAO,yBAAKC,UAAU,QAClB,0CAEKD,EAAMU,YAAcV,EAAMU,WAAWmB,OAAS,GAC/C7B,EAAMU,WAAWoB,KAAK,SAAAC,GAAC,OAAI,yBAAKC,IAAKD,EAAExB,GAAIN,UAAU,YAAY8B,EAAEvB,KAAK0B,UAAU,EAAG,YCyBlFG,G,MAvBH,WACV,OAAQ,yBAAKpC,UAAU,gBACrB,kBAAC,IAAD,KACA,6BACF,yBAAKA,UAAU,WACd,kBAAC,IAAD,CAAMqC,GAAG,KAAT,QACA,kBAAC,IAAD,CAAMA,GAAG,WAAT,UACA,kBAAC,IAAD,CAAMA,GAAG,WAAT,UACA,kBAAC,IAAD,CAAMA,GAAG,UAAT,UAGG,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAW1C,IACjC,kBAAC,IAAD,CAAOwC,KAAK,UAAUE,UAAWC,IACjC,kBAAC,IAAD,CAAOH,KAAK,UAAUE,UAAWN,IACjC,kBAAC,IAAD,CAAOI,KAAK,SAASE,UAAWE,UCbpBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtC,MAAK,SAAAuC,GACjCA,EAAaC,kB","file":"static/js/main.8a8dde15.chunk.js","sourcesContent":["import React from 'react';\n\nconst Home = (props) => {\n    return(<div className=\"home\" >\n        <h3> Home Page</h3>\n    </div>);\n}\n\nexport default Home;\n","import React from 'react';\n\nconst DataLoader = injectedProps =>(BaseComponent) => {\n    class HOC extends React.Component{\n        state = {\n            localData : {\n                id      : \"1\",\n                name    : \"localStorageData\",\n                date    : \"02-22-2020\"\n            },\n            remoteData :{\n            }\n        }\n\n        componentDidMount(){\n            console.log(' componentDidMount :: BaseComponent  injectedProps : ',  injectedProps)\n            this.fetchRemoteData(injectedProps.dataType);\n                // const localDataKey = \"lDataKey\"\n                // const localData = localStorage.getItem(localDataKey); \n                // localStorage.setItem(localDataKey, (localData)|| this.state.localData);\n        }\n\n        fetchRemoteData(dataType){\n            try{\n                let baseURL = \"https://jsonplaceholder.typicode.com/\" + dataType;\n                fetch(baseURL)\n                .then(res => res.json())\n                .then(result => {\n                    var splicedResult = result.splice(0, 10);\n                    console.log(\"fetch Result : \", splicedResult);\n                    this.setState({ remoteData:  splicedResult});\n                })\n                .catch(error => console.log(\"fetch error : \", error));\n            }catch(error){\n                console.log(\"fetchRemoteData error : \", error)\n            }\n        }\n\n        render(){\n            return(<BaseComponent localData={this.state.localData} remoteData={this.state.remoteData} />)\n        }\n    }\n\n    return HOC;\n}\nexport default DataLoader;","import React from 'react';\nimport DataLoader from './DataLoader';\n\nconst Album = (props) => {\n    console.log('Album :: props : ', props);\n    \n    return(<div className=\"album\" >\n        <h3> Album Page</h3>\n        {\n            (props.remoteData && props.remoteData.length > 0) && \n            props.remoteData.map( p => <div key={p.id} className=\"listItem\">{p.title.substring(0, 15)}</div> )\n        }\n    </div>);\n}\n\nconst DataLoadedAlbum = DataLoader({dataType: 'albums'})(Album);\nexport default DataLoadedAlbum;\n","import React from 'react';\nimport DataLoader from './DataLoader';\n\n// (props.cartItems && props.cartItems.length > 0) && \n// props.cartItems.map(p => <CartItem key={p.id} item={p}/>)\nconst Photo = (props) => {\n    console.log('Photo :: props : ', props);\n    return(<div className=\"photo\" >\n        <h3> Photo Page</h3>\n        {\n            (props.remoteData && props.remoteData.length > 0) && \n            props.remoteData.map( p => <div key={p.id} className=\"listItem\">{p.title.substring(0, 15)}</div> )\n        }\n    </div>);\n}\n\nconst DataLoadedPhoto = DataLoader({dataType: 'photos'})(Photo);\nexport default DataLoadedPhoto;\n","import React from 'react';\nimport DataLoader from './DataLoader';\n\nconst User = (props) => {\n    return(<div className=\"user\" >\n        <h3> User Page</h3>\n        {\n            (props.remoteData && props.remoteData.length > 0) && \n            props.remoteData.map( p => <div key={p.id} className=\"listItem\">{p.name.substring(0, 15)}</div> )\n        }\n    </div>);\n}\n\nconst DataLoadedUser = DataLoader({dataType: 'users'})(User);\nexport default DataLoadedUser;\n","import React from 'react';\nimport {BrowserRouter as Router, Link, Route, Switch} from 'react-router-dom';\n\nimport Home from './components/Home';\nimport Album from './components/Album';\nimport DataLoadedPhoto from './components/Photo';\nimport User from './components/User';\n\nimport './css/style.css'\n// import LoadedComponent from './components/DataList';\nconst App = () => {\n  return (<div className=\"appContainer\">\n    <Router>\n    <div>\n\t\t<div className=\"navMenu\">\n\t\t\t<Link to=\"/\">Home</Link>\n\t\t\t<Link to=\"/albums\">Albums</Link>\n\t\t\t<Link to=\"/photos\">Photos</Link>\n\t\t\t<Link to=\"/users\">Users</Link>\n\t\t</div>\n      \n      <Switch>\n        <Route path=\"/\" exact component={Home} />\n        <Route path=\"/albums\" component={Album} />\n        <Route path=\"/photos\" component={DataLoadedPhoto} />\n        <Route path=\"/users\" component={User} />\n      </Switch>\n    </div>\n    </Router>\n    {/* <LoadedComponent /> */}\n  </div>)\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}